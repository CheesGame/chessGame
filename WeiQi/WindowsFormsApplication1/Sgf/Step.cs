//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using algorith_moveInChess;

public class Step
{
    //记录棋谱
    private Piece[] step;
    public bool[][][] existence;
    //记录总共下的步数
    private int numberOfStep;

    public Step()
    {
        existence = new bool[1000][][];
        for (int i = 0; i < 1000; i++) {
            existence[i] = new bool[21][];
            for (int j = 0; j < 21; j++) {
                existence[i][j] = new bool[21];
            }
        }
            step = new Piece[1000];
        numberOfStep = 0;
    }
    public Piece[] getStep()
    {
        return this.step;
    }
    public void deleteElement(int number) {
        for (; number < this.numberOfStep; this.numberOfStep --) {
            this.existence[numberOfStep-1][this.step[this.numberOfStep - 1].getXCoordinate()][this.step[this.numberOfStep - 1].getYCoordinate()]=false;
            this.step[this.numberOfStep - 1] = null;
        }
    }
    public void resetStep() {
        this.numberOfStep = 0;
        for (int i = 0; i < step.Count(); i++) {
            step[i] = null;   
        }
    }
    public void resetExitence() {
        for (int i = 0; i < existence.Count(); i++) {
            for (int j = 0; j < 21; j++) {
                for (int k = 0; k < 21; k++) {
                    existence[i][j][k] = false;
                }
            }
        }
    }
    public void resetNExitence(int number) {
        for (int i = 0; i < 21; i++) {
            for (int j = 0; j < 21; j++) {
                existence[number][i][j] = false;
            }
        }
    }
    public void setStep()
    {
    }
    public int getNumberOfStep()
    {
        return this.numberOfStep;
    }
    public void setNumberOfStep(int numberOfStep)
    {
        this.numberOfStep = numberOfStep;
    }
    public void addExistence(bool[][] existence)
    {
        for (int i = 0; i < 21; i++) {
            for (int j = 0; j < 21; j++) {
                this.existence[numberOfStep][i][j] = existence[i][j];
            }
        }
    }

    public bool[][] getExistence(int number)
    {
        return this.existence[number];
    }
    public bool searchExistence(int x, int y, int stepNumber) { 
        return existence[stepNumber][x][y];
    }
    //下一步棋
    public void addStep(Piece newStep)
    {
        step[numberOfStep] = new Piece();
        step[numberOfStep] = newStep;
    }
    //退一步棋
    public void stepDecrease()
    {
        numberOfStep--;
    }
    //步数加一
    public void stepIncrease() {
        numberOfStep++;
    }
    //读入sgf文件并解读
    public void fromFile(string path)
    {
        this.resetExitence();
        this.resetStep();
        //读文件
        FileStream f = new FileStream(path, FileMode.Open);
        StreamReader r = new StreamReader(f);
        string fileString = r.ReadToEnd();
        r.Close();
        f.Close();
        String[] fileSplit = new String[10000];
        fileSplit = fileString.Split(';');
        for (int i = 2; i < fileSplit.Length; i++)
        {
            Piece stone = new Piece();
            if (fileSplit[i][0] == 'B') stone.setColor(1);
            else if (fileSplit[i][0] == 'W') stone.setColor(-1);
            else break;
            stone.setXCoordinate(fileSplit[i][2] - 'a' + 1);
            stone.setYCoordinate(fileSplit[i][3] - 'a' + 1);
            addStep(stone);
            this.stepIncrease();
        }
    }
   
    public String toString()
    {
        String content = "";
        for (int i = 0; i < numberOfStep; i++)
        {
            if (step[i].getColor() == -1) content = content + "W";
            else content = content + "B";
            content = content + "[" + Convert.ToChar('a' + step[i].getXCoordinate() - 1) + Convert.ToChar('a' + step[i].getYCoordinate() - 1) + "]" + ";";
        }
        content = "(;GM[1]FF[4]SZ[19]DT[" + System.DateTime.Now + "]KM[0.0]AP[GNU Go:3.6];" + content + ")";
        return content;
    }
    
}

